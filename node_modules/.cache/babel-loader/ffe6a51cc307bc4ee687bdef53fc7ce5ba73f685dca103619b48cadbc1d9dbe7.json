{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\tp\\\\src\\\\components\\\\Tabla.js\",\n  _s = $RefreshSig$();\nimport Table from 'react-bootstrap/Table';\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tabla({\n  tabla\n}) {\n  _s();\n  const [Data, setData] = useState([]);\n  async function Buscar_data() {\n    try {\n      const response = await fetch('http://localhost:4000/' + tabla);\n      if (response.ok) {\n        response.json().then(data => setData(data));\n      } else {\n        console.log('No render');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  Buscar_data();\n  const headers = Object.keys(Data[0]);\n  const rows = Data.map(item => Object.values(item));\n  return /*#__PURE__*/_jsxDEV(Table, {\n    responsive: true,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"ml-3 text-center mayus\",\n      style: {\n        color: \"green\"\n      },\n      children: tabla\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: header\n        }, header, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 44\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: cell\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 51\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n_s(Tabla, \"9n+SE//EAYnFPAbWuMNi+6Aweh8=\");\n_c = Tabla;\nexport default Tabla;\nvar _c;\n$RefreshReg$(_c, \"Tabla\");","map":{"version":3,"names":["Table","React","useState","jsxDEV","_jsxDEV","Tabla","tabla","_s","Data","setData","Buscar_data","response","fetch","ok","json","then","data","console","log","error","headers","Object","keys","rows","map","item","values","responsive","children","className","style","color","fileName","_jsxFileName","lineNumber","columnNumber","header","row","index","cell","_c","$RefreshReg$"],"sources":["C:/React/tp/src/components/Tabla.js"],"sourcesContent":["import Table from 'react-bootstrap/Table';\r\nimport React, { useState } from \"react\";\r\nfunction Tabla({ tabla }) {\r\n    const [Data, setData] = useState([])\r\n    async function Buscar_data() {\r\n        try {\r\n            const response = await fetch('http://localhost:4000/' + tabla);\r\n            if (response.ok) {\r\n                response.json().then(data => setData(data))\r\n            } else {\r\n                console.log('No render');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    Buscar_data();\r\n    const headers = Object.keys(Data[0]);\r\n    const rows = Data.map(item => Object.values(item));\r\n\r\n    return (\r\n\r\n        <Table responsive>\r\n            <h2 className=\"ml-3 text-center mayus\" style={{ color: \"green\" }}>{tabla}</h2>\r\n            <thead>\r\n                <tr>\r\n                    {headers.map(header => <th key={header}>{header}</th>)}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows.map((row, index) => (\r\n                    <tr key={index}>\r\n                        {row.map((cell, index) => <td key={index}>{cell}</td>)}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\nexport default Tabla;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxC,SAASC,KAAKA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,eAAeQ,WAAWA,CAAA,EAAG;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGN,KAAK,CAAC;MAC9D,IAAIK,QAAQ,CAACE,EAAE,EAAE;QACbF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAIP,OAAO,CAACO,IAAI,CAAC,CAAC;MAC/C,CAAC,MAAM;QACHC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC5B;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACtB;EACJ;EACAT,WAAW,CAAC,CAAC;EACb,MAAMU,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACd,IAAI,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMe,IAAI,GAAGf,IAAI,CAACgB,GAAG,CAACC,IAAI,IAAIJ,MAAM,CAACK,MAAM,CAACD,IAAI,CAAC,CAAC;EAElD,oBAEIrB,OAAA,CAACJ,KAAK;IAAC2B,UAAU;IAAAC,QAAA,gBACbxB,OAAA;MAAIyB,SAAS,EAAC,wBAAwB;MAACC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAQ,CAAE;MAAAH,QAAA,EAAEtB;IAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC9E/B,OAAA;MAAAwB,QAAA,eACIxB,OAAA;QAAAwB,QAAA,EACKR,OAAO,CAACI,GAAG,CAACY,MAAM,iBAAIhC,OAAA;UAAAwB,QAAA,EAAkBQ;QAAM,GAAfA,MAAM;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACR/B,OAAA;MAAAwB,QAAA,EACKL,IAAI,CAACC,GAAG,CAAC,CAACa,GAAG,EAAEC,KAAK,kBACjBlC,OAAA;QAAAwB,QAAA,EACKS,GAAG,CAACb,GAAG,CAAC,CAACe,IAAI,EAAED,KAAK,kBAAKlC,OAAA;UAAAwB,QAAA,EAAiBW;QAAI,GAAZD,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAC,GADjDG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB;AAAC5B,EAAA,CApCQF,KAAK;AAAAmC,EAAA,GAALnC,KAAK;AAqCd,eAAeA,KAAK;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}