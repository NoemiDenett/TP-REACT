{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\tp\\\\src\\\\components\\\\Tabla.js\";\nimport Table from 'react-bootstrap/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tabla({\n  tabla\n}) {\n  function getHeadings(data) {\n    return Object.keys(data[0]).map(key => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        children: key\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 20\n      }, this);\n    });\n  }\n  function getRows(data) {\n    return data.map(obj => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: getCells(obj)\n      }, obj, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 20\n      }, this);\n    });\n  }\n  function getCells(obj) {\n    return Object.values(obj).map(value => {\n      return /*#__PURE__*/_jsxDEV(\"td\", {\n        children: value\n      }, value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 20\n      }, this);\n    });\n  }\n  async function Buscar_data() {\n    try {\n      const response = await fetch('http://localhost:4000/' + tabla);\n      if (response.ok) {\n        response.json().then(data => render(data));\n      } else {\n        console.log('No render');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  Buscar_data();\n  function render(data) {\n    /*#__PURE__*/_jsxDEV(Table, {\n      responsive: \"sm\",\n      striped: true,\n      bordered: true,\n      hover: true,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"ml-3 text-center\",\n        style: {\n          color: \"green\"\n        },\n        children: \" Usuarios \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"thead\", {\n        children: getHeadings(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: getRows(data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this);\n  }\n}\n_c = Tabla;\nexport default Tabla;\nvar _c;\n$RefreshReg$(_c, \"Tabla\");","map":{"version":3,"names":["Table","jsxDEV","_jsxDEV","Tabla","tabla","getHeadings","data","Object","keys","map","key","children","fileName","_jsxFileName","lineNumber","columnNumber","getRows","obj","getCells","values","value","Buscar_data","response","fetch","ok","json","then","render","console","log","error","responsive","striped","bordered","hover","className","style","color","_c","$RefreshReg$"],"sources":["C:/React/tp/src/components/Tabla.js"],"sourcesContent":["import Table from 'react-bootstrap/Table';\r\nfunction Tabla({ tabla }) {\r\n\r\n    function getHeadings(data) {\r\n        return Object.keys(data[0]).map(key => {\r\n            return <th key={key}>{key}</th>;\r\n        });\r\n    }\r\n\r\n    function getRows(data) {\r\n        return data.map(obj => {\r\n            return <tr key={obj}>{getCells(obj)}</tr>;\r\n        });\r\n    }\r\n\r\n    function getCells(obj) {\r\n        return Object.values(obj).map(value => {\r\n            return <td key={value}>{value}</td>;\r\n        });\r\n    }\r\n\r\n    async function Buscar_data() {\r\n        try {\r\n            const response = await fetch('http://localhost:4000/' + tabla);\r\n            if (response.ok) {\r\n                response.json().then(data => render(data))\r\n            } else {\r\n                console.log('No render');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    Buscar_data();\r\n\r\n    function render(data) {    \r\n        <Table responsive=\"sm\" striped bordered hover>\r\n            <h2 className=\"ml-3 text-center\" style={{ color: \"green\" }}> Usuarios </h2>\r\n            <thead>{getHeadings(data)}</thead>\r\n            <tbody>{getRows(data)}</tbody>\r\n        </Table>\r\n    }\r\n}\r\nexport default Tabla;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1C,SAASC,KAAKA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAEtB,SAASC,WAAWA,CAACC,IAAI,EAAE;IACvB,OAAOC,MAAM,CAACC,IAAI,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC,CAACG,GAAG,CAACC,GAAG,IAAI;MACnC,oBAAOR,OAAA;QAAAS,QAAA,EAAeD;MAAG,GAATA,GAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAW,CAAC;IACnC,CAAC,CAAC;EACN;EAEA,SAASC,OAAOA,CAACV,IAAI,EAAE;IACnB,OAAOA,IAAI,CAACG,GAAG,CAACQ,GAAG,IAAI;MACnB,oBAAOf,OAAA;QAAAS,QAAA,EAAeO,QAAQ,CAACD,GAAG;MAAC,GAAnBA,GAAG;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAAC;IAC7C,CAAC,CAAC;EACN;EAEA,SAASG,QAAQA,CAACD,GAAG,EAAE;IACnB,OAAOV,MAAM,CAACY,MAAM,CAACF,GAAG,CAAC,CAACR,GAAG,CAACW,KAAK,IAAI;MACnC,oBAAOlB,OAAA;QAAAS,QAAA,EAAiBS;MAAK,GAAbA,KAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC;IACvC,CAAC,CAAC;EACN;EAEA,eAAeM,WAAWA,CAAA,EAAG;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGnB,KAAK,CAAC;MAC9D,IAAIkB,QAAQ,CAACE,EAAE,EAAE;QACbF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAACpB,IAAI,IAAIqB,MAAM,CAACrB,IAAI,CAAC,CAAC;MAC9C,CAAC,MAAM;QACHsB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC5B;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACtB;EACJ;EACAT,WAAW,CAAC,CAAC;EAEb,SAASM,MAAMA,CAACrB,IAAI,EAAE;IAClB,aAAAJ,OAAA,CAACF,KAAK;MAAC+B,UAAU,EAAC,IAAI;MAACC,OAAO;MAACC,QAAQ;MAACC,KAAK;MAAAvB,QAAA,gBACzCT,OAAA;QAAIiC,SAAS,EAAC,kBAAkB;QAACC,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAA1B,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3Eb,OAAA;QAAAS,QAAA,EAAQN,WAAW,CAACC,IAAI;MAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClCb,OAAA;QAAAS,QAAA,EAAQK,OAAO,CAACV,IAAI;MAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC;EACZ;AACJ;AAACuB,EAAA,GAzCQnC,KAAK;AA0Cd,eAAeA,KAAK;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}