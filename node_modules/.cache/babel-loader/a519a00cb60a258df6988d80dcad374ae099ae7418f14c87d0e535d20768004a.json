{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\tp\\\\src\\\\components\\\\Tabla.js\",\n  _s = $RefreshSig$();\nimport Table from 'react-bootstrap/Table';\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tabla({\n  tabla\n}) {\n  _s();\n  const [Data, setData] = useState([]);\n  let headers = [];\n  let rows = [];\n  async function Buscar_data() {\n    try {\n      const response = await fetch('http://localhost:4000/' + tabla);\n      if (response.ok) {\n        response.json().then(data => set_tabla(data));\n      } else {\n        console.log('No render');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  Buscar_data();\n  function set_tabla(data) {\n    try {\n      setData(data);\n      headers = Object.keys(Data[0]);\n      rows = Data.map(item => Object.values(item));\n    } catch (error) {}\n  }\n  return /*#__PURE__*/_jsxDEV(Table, {\n    responsive: true,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n          children: header\n        }, header, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 44\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: cell\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 51\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_s(Tabla, \"9n+SE//EAYnFPAbWuMNi+6Aweh8=\");\n_c = Tabla;\nexport default Tabla;\nvar _c;\n$RefreshReg$(_c, \"Tabla\");","map":{"version":3,"names":["Table","React","useState","jsxDEV","_jsxDEV","Tabla","tabla","_s","Data","setData","headers","rows","Buscar_data","response","fetch","ok","json","then","data","set_tabla","console","log","error","Object","keys","map","item","values","responsive","children","header","fileName","_jsxFileName","lineNumber","columnNumber","row","index","cell","_c","$RefreshReg$"],"sources":["C:/React/tp/src/components/Tabla.js"],"sourcesContent":["import Table from 'react-bootstrap/Table';\r\nimport React, { useState } from \"react\";\r\nfunction Tabla({ tabla }) {\r\n    const [Data, setData] = useState([])\r\n    let headers = [];\r\n    let rows = [];\r\n    async function Buscar_data() {\r\n        try {\r\n            const response = await fetch('http://localhost:4000/' + tabla);\r\n            if (response.ok) {\r\n                response.json().then(data => set_tabla(data))\r\n            } else {\r\n                console.log('No render');\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    Buscar_data();\r\n\r\n    function set_tabla(data) {\r\n        try {\r\n            setData(data);\r\n            headers = Object.keys(Data[0]);\r\n            rows = Data.map(item => Object.values(item));\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <Table responsive>\r\n            <thead>\r\n                <tr>\r\n                    {headers.map(header => <th key={header}>{header}</th>)}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows.map((row, index) => (\r\n                    <tr key={index}>\r\n                        {row.map((cell, index) => <td key={index}>{cell}</td>)}\r\n                    </tr>\r\n                ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\nexport default Tabla;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxC,SAASC,KAAKA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,IAAIQ,OAAO,GAAG,EAAE;EAChB,IAAIC,IAAI,GAAG,EAAE;EACb,eAAeC,WAAWA,CAAA,EAAG;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGR,KAAK,CAAC;MAC9D,IAAIO,QAAQ,CAACE,EAAE,EAAE;QACbF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAIC,SAAS,CAACD,IAAI,CAAC,CAAC;MACjD,CAAC,MAAM;QACHE,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC5B;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACtB;EACJ;EACAV,WAAW,CAAC,CAAC;EAEb,SAASO,SAASA,CAACD,IAAI,EAAE;IACrB,IAAI;MACAT,OAAO,CAACS,IAAI,CAAC;MACbR,OAAO,GAAGa,MAAM,CAACC,IAAI,CAAChB,IAAI,CAAC,CAAC,CAAC,CAAC;MAC9BG,IAAI,GAAGH,IAAI,CAACiB,GAAG,CAACC,IAAI,IAAIH,MAAM,CAACI,MAAM,CAACD,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,OAAOJ,KAAK,EAAE,CAEhB;EACJ;EAEA,oBAEIlB,OAAA,CAACJ,KAAK;IAAC4B,UAAU;IAAAC,QAAA,gBACbzB,OAAA;MAAAyB,QAAA,eACIzB,OAAA;QAAAyB,QAAA,EACKnB,OAAO,CAACe,GAAG,CAACK,MAAM,iBAAI1B,OAAA;UAAAyB,QAAA,EAAkBC;QAAM,GAAfA,MAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACR9B,OAAA;MAAAyB,QAAA,EACKlB,IAAI,CAACc,GAAG,CAAC,CAACU,GAAG,EAAEC,KAAK,kBACjBhC,OAAA;QAAAyB,QAAA,EACKM,GAAG,CAACV,GAAG,CAAC,CAACY,IAAI,EAAED,KAAK,kBAAKhC,OAAA;UAAAyB,QAAA,EAAiBQ;QAAI,GAAZD,KAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC;MAAC,GADjDE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEhB;AAAC3B,EAAA,CA7CQF,KAAK;AAAAiC,EAAA,GAALjC,KAAK;AA8Cd,eAAeA,KAAK;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}